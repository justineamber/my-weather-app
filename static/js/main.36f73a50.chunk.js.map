{"version":3,"sources":["static/overcastCloudy.jpg","components/Weather-Single-Component/Weather-Single-Component.js","components/Weather-List-Component/Weather-List-Component.js","components/Month-Date-Box-Component/Month-Date-Box-Component.js","components/Current-City-Conditions-Display-Component/Current-City-Conditions-Display-Component.js","components/Forecast-Tabs-Component/Forecast-Tabs-Component.js","components/Search-Component/Search-Component.js","components/Weather-Dashboard/Weather-Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","weatherSingleContainer","display","flexDirection","flexWrap","justifyContent","alignContent","alignItems","titleSingle","fontSize","fontWeight","padding","weatherSingle","width","height","viewBox","tempSingle","WeatherSingleComponent","props","classes","title","iconID","mainTemp","Box","className","Typography","variant","src","alt","Math","floor","theme","weatherList","backgroundColor","marginTop","spacing","overflowX","WeatherListComponent","data","map","forecast","key","monthDateBox","currentMonth","color","textTransform","currentDate","MonthDateBoxComponent","day","month","currentConditionsList","position","weatherDescriptionStyle","letterSpacing","tempratureStyle","fontFamily","degreeStyle","left","top","CurrentCityConditionsDisplayComponent","weatherDescription","round","flexContainer","indicator","tab","minWidth","marginRight","ForecastTabsComponent","forecastDuration","handleDurationChange","Tabs","onChange","event","value","scrollButtons","Tab","disableRipple","label","id","aria-controls","autoCompleteWrapper","marginLeft","inputBackgroundColor","SearchComponent","cityName","inputValue","onInputChange","topInnovativeCityOptions","Autocomplete","options","style","renderInput","params","TextField","weatherDashboardWrapper","backgroundImage","image","url","backgroundSize","backgroundRepeat","backgroundPosition","topBar","WeatherDashboard","useState","setForecastDuration","dailyData","setDailyData","weeklyData","setWeeklyData","setCityName","setInputValue","Image","setImage","useEffect","fetch","process","then","response","json","list","firstFive","slice","listItem","dt_txt","weather","icon","main","temp","description","firstFiveDays","filter","includes","unsplash","Unsplash","accessKey","search","photos","toJson","results","imageUrl","length","urls","full","Date","toLocaleDateString","undefined","newValue","newInputValue","currentTempAndWeatherDescription","duration","root","flexGrow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36f73a50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/overcastCloudy.66c5f23e.jpg\";","import React from \"react\";\nimport { Box, Typography, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  weatherSingleContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    alignContent: \"center\",\n    alignItems: \"center\"\n  },\n  titleSingle: {\n    fontSize: \"1.25rem\",\n    fontWeight: 500,\n    padding: \"1rem\"\n  },\n  weatherSingle: {\n    padding: \"1rem\",\n    width: \"5rem\",\n    height: \"5rem\",\n    viewBox: \"0 0 80 80\"\n  },\n  tempSingle: {\n    fontSize: \"1.25rem\",\n    fontWeight: 500,\n    padding: \"1rem\"\n  }\n}));\n\nfunction WeatherSingleComponent(props) {\n  const classes = useStyles();\n  const { title, iconID, mainTemp } = props;\n\n  return (\n    <Box className={classes.weatherSingleContainer}>\n      <Typography variant=\"h5\" className={classes.titleSingle}>\n        {title}\n      </Typography>\n\n      <img\n        className={classes.weatherSingle}\n        src={`http://openweathermap.org/img/w/${iconID}.png`}\n        alt=\"weather condition\"\n      />\n\n      <Typography variant=\"h5\" className={classes.tempSingle}>{`${Math.floor(\n        mainTemp\n      )}°`}</Typography>\n    </Box>\n  );\n}\n\nexport default WeatherSingleComponent;\n","import React from \"react\";\nimport { Box, makeStyles } from \"@material-ui/core\";\nimport WeatherSingleComponent from \"../Weather-Single-Component/Weather-Single-Component\";\n\nconst useStyles = makeStyles(theme => ({\n  weatherList: {\n    backgroundColor: \"#fff\",\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    padding: \"1.5rem 0\",\n    marginTop: theme.spacing(4),\n    overflowX: \"auto\",\n    width: \"100%\"\n  }\n}));\n\nfunction WeatherListComponent(props) {\n  const classes = useStyles();\n  const { data } = props;\n\n  return (\n    <Box className={classes.weatherList}>\n      {data.map(forecast => (\n        <WeatherSingleComponent\n          key={forecast.title}\n          title={forecast.title}\n          iconID={forecast.iconID}\n          mainTemp={forecast.mainTemp}\n        />\n      ))}\n    </Box>\n  );\n}\n\nexport default WeatherListComponent;\n","import React from \"react\";\nimport { Box, makeStyles, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  monthDateBox: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"80px\",\n    width: \"80px\",\n    backgroundColor: \"#000\",\n    flexDirection: \"column\"\n  },\n  currentMonth: {\n    color: \"#fff\",\n    fontWeight: 700,\n    textTransform: \"uppercase\"\n  },\n  currentDate: {\n    color: \"#fff\",\n    fontSize: \"1.25rem\",\n    fontWeight: 700\n  }\n}));\n\nfunction MonthDateBoxComponent(props) {\n  const classes = useStyles();\n  const { day, month } = props;\n\n  return (\n    <Box className={classes.monthDateBox}>\n      <Typography className={classes.currentMonth}>{month}</Typography>\n      <Typography className={classes.currentDate}>{day}</Typography>\n    </Box>\n  );\n}\n\nexport default MonthDateBoxComponent;\n","import React from \"react\";\nimport { Box, makeStyles, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  currentConditionsList: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    padding: \"4rem\",\n    position: \"relative\"\n  },\n  weatherDescriptionStyle: {\n    color: \"#fff\",\n    display: \"flex\",\n    fontWeight: 700,\n    fontSize: \"1rem\",\n    letterSpacing: \"0.0625rem\",\n    position: \"absolute\"\n  },\n  tempratureStyle: {\n    color: \"#fff\",\n    display: \"flex\",\n    fontWeight: 700,\n    fontFamily: \"Nova Slim\",\n    marginTop: \"6rem\",\n    position: \"absolute\"\n  },\n  degreeStyle: {\n    color: \"#fff\",\n    display: \"flex\",\n    fontWeight: 700,\n    fontFamily: \"Nova Slim\",\n    left: \"8.75rem\",\n    position: \"absolute\",\n    top: \"4.6875rem\"\n  }\n}));\n\nfunction CurrentCityConditionsDisplayComponent(props) {\n  const classes = useStyles();\n  const { mainTemp, weatherDescription } = props;\n\n  return (\n    <Box className={classes.currentConditionsList}>\n      <Typography variant=\"h5\" className={classes.weatherDescriptionStyle}>\n        {weatherDescription}\n      </Typography>\n      <Typography variant=\"h2\" className={classes.tempratureStyle}>\n        {Math.round(mainTemp)}\n      </Typography>\n      <Typography variant=\"h3\" className={classes.degreeStyle}>\n        °\n      </Typography>\n    </Box>\n  );\n}\n\nexport default CurrentCityConditionsDisplayComponent;\n","import React from \"react\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  flexContainer: {\n    justifyContent: \"flex-end\"\n  },\n  indicator: {\n    backgroundColor: \"#fff\"\n  },\n  tab: {\n    color: \"#eaeaea\",\n    fontSize: \"1rem\",\n    fontWeight: 700,\n    textTransform: \"none\",\n    minWidth: 62,\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction ForecastTabsComponent(props) {\n  const classes = useStyles();\n  const { forecastDuration, handleDurationChange } = props;\n\n  return (\n    <Tabs\n      onChange={(event, value) => handleDurationChange(value)}\n      value={forecastDuration}\n      variant=\"scrollable\"\n      scrollButtons=\"auto\"\n      classes={{\n        flexContainer: classes.flexContainer,\n        indicator: classes.indicator\n      }}\n    >\n      <Tab\n        className={classes.tab}\n        disableRipple\n        label=\"Today\"\n        id=\"scrollable-auto-tab-0\"\n        aria-controls=\"scrollable-auto-tabpanel-0\"\n        value=\"Today\"\n      />\n\n      <Tab\n        className={classes.tab}\n        disableRipple\n        label=\"Week\"\n        id=\"scrollable-auto-tab-1\"\n        aria-controls=\"scrollable-auto-tabpanel-1\"\n        value=\"Week\"\n      />\n    </Tabs>\n  );\n}\n\nexport default ForecastTabsComponent;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst useStyles = makeStyles(() => ({\nautoCompleteWrapper: {\n    marginTop: \"1rem\",\n    marginLeft: \"1rem\"\n  }, \n  inputBackgroundColor: {\n    backgroundColor: \"#fff\", \n  }\n}));\n\nfunction SearchComponent (props) {\nconst {cityName, onChange, inputValue, onInputChange, topInnovativeCityOptions } = props;\n\n const classes = useStyles();\n\n return (\n    <>\n      <Box className={classes.autoCompleteWrapper}>\n      <Autocomplete\n        value={cityName}\n        onChange={onChange}\n        inputValue={inputValue}\n        onInputChange={onInputChange}\n        id=\"Search city\"\n        options={topInnovativeCityOptions}\n        style={{ width: 200 }}\n        renderInput={(params) => <TextField {...params} label=\"Search city\" variant=\"filled\" className={classes.inputBackgroundColor}/>}\n      />\n      </Box>\n    </>\n )\n}\n\nexport default SearchComponent;\n\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport WeatherListComponent from \"../Weather-List-Component/Weather-List-Component\";\nimport MonthDateBoxComponent from \"../Month-Date-Box-Component/Month-Date-Box-Component\";\nimport CurrentCityConditionsDisplayComponent from \"../Current-City-Conditions-Display-Component/Current-City-Conditions-Display-Component\";\nimport ForecastTabsComponent from \"../Forecast-Tabs-Component/Forecast-Tabs-Component\";\nimport SearchComponent from \"../Search-Component/Search-Component\";\nimport { Box } from \"@material-ui/core\";\nimport Image from \"../../../src/static/overcastCloudy.jpg\";\nimport Unsplash, { toJson } from \"unsplash-js\";\n\nconst useStyles = makeStyles(() => ({\n  weatherDashboardWrapper: {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundImage: image => `url(${image.url})`,\n    backgroundSize: \"cover\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center center\"\n  },\n  topBar: {\n    display: \"flex\",\n    position: \"relative\"\n  }\n}));\n\nfunction WeatherDashboard({ props }) {\n  const [forecastDuration, setForecastDuration] = useState(\"Today\");\n  const [dailyData, setDailyData] = useState([]);\n  const [weeklyData, setWeeklyData] = useState([]);\n  const [cityName, setCityName] = useState(topInnovativeCityOptions[54]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [image, setImage] = useState({\n    alt: \"A cloudy rainforest.\",\n    url: Image\n  });\n\n  const classes = useStyles(image);\n\n  const handleDurationChange = duration => {\n    setForecastDuration(duration);\n  };\n\n  useEffect(() => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n    )\n      .then(response => response.json())\n      .then(response => {\n        if (!response || !response.list) return;\n        const firstFive = response.list.slice(0, 5).map(listItem => {\n          return {\n            title: listItem.dt_txt,\n            iconID: listItem.weather[0].icon,\n            mainTemp: listItem.main.temp,\n            weatherDescription: listItem.weather[0].description\n          };\n        });\n        setDailyData(firstFive);\n\n        const firstFiveDays = response.list\n          .filter(listItem => listItem.dt_txt.includes(\"18:00:00\"))\n          .map(listItem => {\n            return {\n              title: listItem.dt_txt,\n              iconID: listItem.weather[0].icon,\n              mainTemp: listItem.main.temp,\n              weatherDescription: listItem.weather[0].description\n            };\n          });\n        setWeeklyData(firstFiveDays);\n      });\n\n    const unsplash = new Unsplash({\n      accessKey: `${process.env.REACT_APP_UNSPLASH_API_KEY}`\n    });\n\n    if (cityName) {\n      unsplash.search\n        .photos(cityName, 1, 1)\n        .then(toJson)\n        .then(json => {\n          const results = json.results;\n          const imageUrl = results.length > 0 ? results[0].urls.full : Image;\n\n          setImage({\n            alt: cityName,\n            url: imageUrl\n          });\n        });\n    }\n  }, [cityName]);\n\n  const day = new Date();\n  const dayOptions = { day: \"numeric\" };\n\n  const month = new Date();\n  const monthOptions = { month: \"short\" };\n\n  return (\n    <>\n      <Box className={classes.weatherDashboardWrapper}>\n        <Box className={classes.topBar}>\n          <MonthDateBoxComponent\n            day={day.toLocaleDateString(undefined, dayOptions)}\n            month={month.toLocaleDateString(undefined, monthOptions)}\n          />\n          <SearchComponent\n            value={cityName}\n            onChange={(event, newValue) => {\n              setCityName(newValue);\n            }}\n            inputValue={inputValue}\n            onInputChange={(event, newInputValue) => {\n              setInputValue(newInputValue);\n            }}\n            topInnovativeCityOptions={topInnovativeCityOptions}\n          />\n        </Box>\n\n        {dailyData.slice(0, 1).map(currentTempAndWeatherDescription => (\n          <CurrentCityConditionsDisplayComponent\n            key={currentTempAndWeatherDescription.mainTemp}\n            mainTemp={currentTempAndWeatherDescription.mainTemp}\n            weatherDescription={\n              currentTempAndWeatherDescription.weatherDescription\n            }\n          />\n        ))}\n\n        <ForecastTabsComponent\n          forecastDuration={forecastDuration}\n          handleDurationChange={handleDurationChange}\n        />\n        <WeatherListComponent\n          data={forecastDuration === \"Today\" ? dailyData : weeklyData}\n        />\n      </Box>\n    </>\n  );\n}\n\nexport default WeatherDashboard;\n\nconst topInnovativeCityOptions = [\n  \"Abu Dhabi\",\n  \"Amsterdam\",\n  \"Athens\",\n  \"Atlanta\",\n  \"Bangkok\",\n  \"Barcelona\",\n  \"Beijing\",\n  \"Berlin\",\n  \"Boston\",\n  \"Brisbane\",\n  \"Brussels\",\n  \"Budapest\",\n  \"Buenos Aires\",\n  \"Busan\",\n  \"Calgary\",\n  \"Cape Town\",\n  \"Charlotte\",\n  \"Chicago\",\n  \"Cologne\",\n  \"Copenhagen\",\n  \"Denver\",\n  \"Detroit\",\n  \"Dubai\",\n  \"Dublin\",\n  \"Düsseldorf\",\n  \"Edinburgh\",\n  \"Fort Lauderdale\",\n  \"Frankfurt\",\n  \"Guangzhou\",\n  \"Hamburg\",\n  \"Helsinki\",\n  \"Hong Kong\",\n  \"Honolulu\",\n  \"Houston\",\n  \"Istanbul\",\n  \"Kuala Lumpur\",\n  \"Kyoto\",\n  \"Lisbon\",\n  \"London\",\n  \"Los Angeles\",\n  \"Lyon\",\n  \"Madrid\",\n  \"Manchester\",\n  \"Melbourne\",\n  \"Mexico City\",\n  \"Miami\",\n  \"Milan\",\n  \"Montréal\",\n  \"Moscow\",\n  \"Mumbai\",\n  \"Munich\",\n  \"Nashville\",\n  \"New York\",\n  \"Osaka\",\n  \"Oslo\",\n  \"Paris\",\n  \"Perth\",\n  \"Portland\",\n  \"Prague\",\n  \"Providence\",\n  \"Québec\",\n  \"Rome\",\n  \"Rotterdam\",\n  \"Seattle\",\n  \"Seoul\",\n  \"Shanghai\",\n  \"Shenzhen\",\n  \"Singapore\",\n  \"St Louis\",\n  \"Stockholm\",\n  \"Sydney\",\n  \"São Paulo\",\n  \"Taipei\",\n  \"Tel Aviv\",\n  \"The Hague\",\n  \"Tokyo\",\n  \"Toronto\",\n  \"Vancouver\",\n  \"Vienna\",\n  \"Washington DC\",\n  \"Zürich\"\n];\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport WeatherDasboard from \"./components/Weather-Dashboard/Weather-Dashboard\";\nimport \"./App.css\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n    height: \"100vh\"\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <div className={classes.root}>\n          <WeatherDasboard  />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}